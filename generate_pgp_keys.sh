#!/usr/bin/env bash

set -euo pipefail

source "./common.sh"

function export_key_and_revocation_certificate() {
  print_trace

  local email="$1"
  local public_key_path="$2"
  local private_key_path="$3"
  local private_subkeys_path="$4"
  local revocation_certificate_path="$5"
  local revocation_certificate_config="$6"

  gpg \
    --armor \
    --output "${public_key_path}" \
    --export "${email}"
  gpg \
    --armor \
    --output "${private_key_path}" \
    --export-secret-keys "${email}"
  gpg \
    --armor \
    --output "${private_subkeys_path}" \
    --export-secret-subkeys "${email}"
  gpg \
    --armor \
    --output "${revocation_certificate_path}" \
    --command-file "./${revocation_certificate_config}" \
    --generate-revocation "${email}"
}

function generate_keys() {
  print_trace

  local email="$1"
  local primary_key_config="$2"
  local config_dir="$3"

  # Sleeps are to let rngd build up new entropy
  gpg --expert --full-generate-key --batch "${primary_key_config}"
  sleep 2
  gpg --expert --command-file "./${config_dir}/subkey_config_sign" --edit-key "${email}"
  sleep 2
  gpg --expert --command-file "./${config_dir}/subkey_config_encrypt" --edit-key "${email}"
  sleep 2
  gpg --expert --command-file "./${config_dir}/subkey_config_authenticate" --edit-key "${email}"
  sleep 2

  # Clean up autogenerated revocation certificates for safety
  rm "$HOME"/.gnupg/openpgp-revocs.d/*.rev
}

function generate_configs() {
  print_trace

  local name="$1"
  local email="$2"
  local key_comment="$3"
  local config_dir="$4"
  local primary_key_config="$5"
  local revocation_certificate_config="$6"

  local primary_key_config_template="./${config_dir}/primary_key_config_template"
  local revocation_certificate_config_template="./${config_dir}/revocation_certificate_config_template"

  name="${name}" \
    email="${email}" \
    comment="${key_comment}" \
    envsubst <"${primary_key_config_template}" >"${primary_key_config}"
  comment="${key_comment}" \
    envsubst <"${revocation_certificate_config_template}" >"${revocation_certificate_config}"
}

function safety_checks() {
  print_trace

  local email="$1"
  local temp_dir="$2"
  local secrets_output_dir="$3"

  if {
    gpg --list-keys
    gpg --list-secret-keys
  } | grep --silent "${email}"; then
    log_error "Key for ${email} already exists"
    exit 1
  fi

  if test -d "${temp_dir}"; then
    log_error "${temp_dir} already exists: aborting"
    exit 1
  fi

  if test -d "${secrets_output_dir}"; then
    log_error "${secrets_output_dir} already exists: aborting"
    exit 1
  fi
}

function main() {
  # Not strictly necessary, but helps ensure /dev/urandom is well seeded
  ensure_rng_tools_daemon_is_running

  local config_dir="./pgp_key_generation"

  local name="Wojciech Kaluza"
  local email="wkaluza@protonmail.com"
  local today_yymmdd
  today_yymmdd="$(date +'%Y%m%d')"
  local prefix="engineering"
  local key_comment="engineering_${today_yymmdd}"

  local temp_dir="${config_dir}/${prefix}_temp___"
  local secrets_output_dir="${config_dir}/${prefix}_secrets"

  safety_checks "${email}" "${temp_dir}" "${secrets_output_dir}"

  mkdir --parents "./${temp_dir}"
  mkdir --parents "./${secrets_output_dir}"

  local primary_key_config="./${temp_dir}/primary_key_config"
  local revocation_certificate_config="./${temp_dir}/revocation_certificate_config"
  generate_configs "${name}" "${email}" "${key_comment}" "${config_dir}" "${primary_key_config}" "${revocation_certificate_config}"

  generate_keys "${email}" "${primary_key_config}" "${config_dir}"

  local public_key_path="${secrets_output_dir}/${prefix}_pgp_primary_key.pub"
  local private_key_path="${secrets_output_dir}/${prefix}_pgp_primary_key.secret"
  local private_subkeys_path="${secrets_output_dir}/${prefix}_pgp_subkeys.secret"
  local revocation_certificate_path="${secrets_output_dir}/${prefix}_pgp_revocation_certificate.secret"

  export_key_and_revocation_certificate "${email}" "${public_key_path}" "${private_key_path}" "${private_subkeys_path}" "${revocation_certificate_path}" "${revocation_certificate_config}"

  # Clear keys from the database (to be re-imported)
  echo -e "y\ny\ny" | gpg --command-fd 0 --delete-secret-and-public-keys "${email}"

  # Re-import all but the primary secret key
  gpg --import "${public_key_path}"
  gpg --import "${private_subkeys_path}"

  # Restore ultimate trust to re-imported keys
  gpg --expert --command-file "./${config_dir}/ultimate_trust_config" --edit-key "${email}"

  echo ""
  echo "*** gpg --list-keys ************************************************************"
  gpg --list-keys

  echo "*** gpg --list-secret-keys *****************************************************"
  gpg --list-secret-keys

  echo "*** gpg --check-signatures *****************************************************"
  gpg --check-signatures

  echo "********************************************************************************"

  log_info "Keys and revocation certificate exported to ${secrets_output_dir}"
}

# Entry point
main
